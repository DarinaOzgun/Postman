{
	"info": {
		"_postman_id": "2407b58b-17f1-45f1-a58c-781d371d0840",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22129044"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2. Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"3. Проверить, что в body приходит правильный string.\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2. Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let respData = pm.response.json();\r",
							"pm.test(\"3. Спарсить response body в json.\", function () {\r",
							"    console.log(respData)\r",
							"});\r",
							"\r",
							"pm.test(\"4. Проверить, что name в ответе равно name s request (name вбить руками.)\", function () {\r",
							"    pm.expect(respData.name).to.eql(\"Darina\");\r",
							"});\r",
							"\r",
							"pm.test(\"5. Проверить, что age в ответе равно age s request (age вбить руками.)\", function () {\r",
							"    pm.expect(+respData.age).to.eql(37);\r",
							"});\r",
							"\r",
							"pm.test(\"6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\", function () {\r",
							"    pm.expect(+respData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"let reqData = request.data\r",
							"pm.test(\"7. Спарсить request.\", function () {\r",
							"    console.log(reqData)\r",
							"});\r",
							"\r",
							"pm.test(\"8. Проверить, что name в ответе равно name s request (name забрать из request.)\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"pm.test(\"9. Проверить, что age в ответе равно age s request (age забрать из request.)\", function () {\r",
							"    pm.expect(respData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"pm.test(\"10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\", function () {\r",
							"    pm.expect(respData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"11. Вывести в консоль параметр family из response.\", function () {\r",
							"    console.log(respData.family)\r",
							"});\r",
							"\r",
							"pm.test(\"12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\", function () {\r",
							"    pm.expect(respData.family.u_salary_1_5_year).to.eql(parseInt(reqData.salary)*4)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Darina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2. Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let respData = pm.response.json();\r",
							"pm.test(\"3. Спарсить response body в json.\", function () {\r",
							"    // console.log(respData)\r",
							"});\r",
							"\r",
							"let reqData = request.data\r",
							"pm.test(\"7. Спарсить request.\", function () {\r",
							"    // console.log(reqData)\r",
							"});\r",
							"\r",
							"pm.test(\"8. Проверить, что json response имеет параметр start_qa_salary\", function () {\r",
							"    pm.expect(respData).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"\r",
							"pm.test(\"9. Проверить, что json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"pm.test(\"10. Проверить, что json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"pm.test(\"11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"pm.test(\"12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"\r",
							"pm.test(\"13. Проверить, что json response имеет параметр person\", function () {\r",
							"    pm.expect(respData).to.have.property(\"person\")\r",
							"})\r",
							"\r",
							"pm.test(\"14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(respData.start_qa_salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(+reqData.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7);\r",
							"});\r",
							"\r",
							"pm.test(\"17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.eql(+reqData.salary*3.3);\r",
							"});\r",
							"\r",
							"pm.test(\"18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.eql(+reqData.salary*3.8);\r",
							"});\r",
							"\r",
							"pm.test(\"19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(respData.person.u_name[1]).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\", function () {\r",
							"    pm.expect(respData.person.u_age).to.eql(+reqData.age);\r",
							"});\r",
							"\r",
							"pm.test(\"21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(respData.person.u_salary_5_years).to.eql(+reqData.salary*4.2);\r",
							"});\r",
							"\r",
							"pm.test(\"22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\", function () {\r",
							"    for ([key, value] of Object.entries(respData.person)) {\r",
							"        console.log(key,':',value)\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2. Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let respData = pm.response.json();\r",
							"pm.test(\"3. Спарсить response body в json.\", function () {\r",
							"    console.log(respData)\r",
							"});\r",
							"\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"pm.test(\"3. Спарсить request.\", function () {\r",
							"    console.log(reqData)\r",
							"});\r",
							"\r",
							"pm.test (\"5. Проверить, что name в ответе равно name s request (name забрать из request.)\", function (){\r",
							"    pm.expect(respData.name).to.be.eql(reqData.name)\r",
							"    console.log(respData.name, reqData.name);\r",
							"});\r",
							"\r",
							"pm.test (\"6. Проверить, что age в ответе равно age s request (age забрать из request.)\", function (){\r",
							"    pm.expect(respData.age).to.be.eql(reqData.age)\r",
							"    console.log(respData.age, reqData.age);\r",
							"});\r",
							"\r",
							"pm.test (\"7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\", function (){\r",
							"    pm.expect(respData.salary).to.be.eql(+reqData.salary)\r",
							"    console.log(respData.salary, reqData.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"8. Вывести в консоль параметр family из response.\", function () {\r",
							"    console.log(respData.family);\r",
							"});\r",
							"\r",
							"pm.test(\"9. Проверить, что у параметра dog есть параметры name.\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.have.any.keys(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"10. Проверить, что у параметра dog есть параметры age.\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.have.any.keys(\"age\");\r",
							"});\r",
							"\r",
							"pm.test(\"11. Проверить, что параметр name имеет значение Luky.\", function () {\r",
							"    pm.expect(respData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"    console.log(respData.family.pets.dog.name);\r",
							"});\r",
							"\r",
							"pm.test(\"12. Проверить, что параметр age имеет значение 4.\", function () {\r",
							"    pm.expect(respData.family.pets.dog.age).to.eql(4);\r",
							"    console.log(respData.family.pets.dog.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Darina&age=37&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Darina"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2. Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let respData = pm.response.json();\r",
							"pm.test(\"3. Спарсить response body в json.\", function () {\r",
							"    console.log(respData)\r",
							"});\r",
							"\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"pm.test(\"3. Спарсить request.\", function () {\r",
							"    console.log(reqData)\r",
							"});\r",
							"\r",
							"pm.test (\"5. Проверить, что name в ответе равно name s request (name забрать из request.)\", function (){\r",
							"    pm.expect(respData.name).to.be.eql(reqData.name)\r",
							"    console.log(respData.name, reqData.name);\r",
							"});\r",
							"\r",
							"pm.test (\"6. Проверить, что age в ответе равно age s request (age забрать из request.)\", function (){\r",
							"    pm.expect(respData.age).to.be.eql(+reqData.age)\r",
							"    console.log(respData.age, reqData.age);\r",
							"});\r",
							"\r",
							"pm.test(\"7. Вывести в консоль параметр salary из request.\", function() {\r",
							"    console.log(reqData.salary)\r",
							"});\r",
							"\r",
							"pm.test(\"8. Вывести в консоль параметр salary из response.\", function() {\r",
							"    console.log(respData.salary)\r",
							"});\r",
							"\r",
							"pm.test(\"9. Вывести в консоль 0-й элемент параметра salary из response.\", function() {\r",
							"    console.log(respData.salary[0])\r",
							"});\r",
							"\r",
							"pm.test(\"10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\", function() {\r",
							"    console.log(respData.salary[1])\r",
							"});\r",
							"\r",
							"pm.test(\"11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\", function() {\r",
							"    console.log(respData.salary[2])\r",
							"});\r",
							"\r",
							"pm.test(\"12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\", function() {\r",
							"    pm.expect(respData.salary[0]).to.eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"pm.test(\"13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\", function() {\r",
							"    pm.expect(+respData.salary[1]).to.eql(+reqData.salary*2)\r",
							"    console.log(+respData.salary[1], +reqData.salary*2)\r",
							"});\r",
							"\r",
							"pm.test(\"14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\", function() {\r",
							"    pm.expect(+respData.salary[2]).to.eql(+reqData.salary*3)\r",
							"    console.log(+respData.salary[2], +reqData.salary*3)\r",
							"});\r",
							"\r",
							"pm.test(\"15. Создать в окружении переменную name. 18. Передать в окружение переменную name\", function() {\r",
							"    pm.environment.set(\"name\", respData.name);\r",
							"});\r",
							"\r",
							"pm.test(\"16. Создать в окружении переменную age. 19. Передать в окружение переменную age\", function() {\r",
							"    pm.environment.set(\"age\", respData.age);\r",
							"});\r",
							"\r",
							"pm.test(\"17. Создать в окружении переменную salary. 20. Передать в окружение переменную salary\", function() {\r",
							"    pm.environment.set(\"salary\", respData.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\", function () {\r",
							"    for (var i = 0; i < respData.salary.length; i++) {\r",
							"        console.log(respData.salary[i]);\r",
							"        }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Darina&age=37&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Darina"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	]
}